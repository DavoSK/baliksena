#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input universal.glsl --output include/shader_universal.h --slang glsl330

    Overview:

        Shader program 'universal':
            Get shader desc: universal_universal_shader_desc(sg_query_backend());
            Vertex shader: vs
                Attribute slots:
                    ATTR_universal_vs_aPos = 0
                    ATTR_universal_vs_aNormal = 1
                    ATTR_universal_vs_aTexCoord = 2
                    ATTR_universal_vs_aIndexes = 3
                    ATTR_universal_vs_aWeights = 4
                Uniform block 'vs_params':
                    C struct: universal_vs_params_t
                    Bind slot: SLOT_universal_vs_params = 0
                Uniform block 'vs_material':
                    C struct: universal_vs_material_t
                    Bind slot: SLOT_universal_vs_material = 1
                Uniform block 'vs_lights':
                    C struct: universal_vs_lights_t
                    Bind slot: SLOT_universal_vs_lights = 2
            Fragment shader: fs
                Uniform block 'fs_params':
                    C struct: universal_fs_params_t
                    Bind slot: SLOT_universal_fs_params = 0
                Image 'diffuseSampler':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_universal_diffuseSampler = 0
                Image 'alphaSampler':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_universal_alphaSampler = 1
                Image 'envSampler':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_universal_envSampler = 2


    Shader descriptor structs:

        sg_shader universal = sg_make_shader(universal_universal_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_universal_vs_aPos] = { ... },
                    [ATTR_universal_vs_aNormal] = { ... },
                    [ATTR_universal_vs_aTexCoord] = { ... },
                    [ATTR_universal_vs_aIndexes] = { ... },
                    [ATTR_universal_vs_aWeights] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_universal_diffuseSampler = 0;
        SLOT_universal_alphaSampler = 1;
        SLOT_universal_envSampler = 2;

    Bind slot and C-struct for uniform block 'vs_params':

        universal_vs_params_t vs_params = {
            .model = ...;
            .view = ...;
            .projection = ...;
            .bones = ...;
            .viewPos = ...;
            .billboard = ...;
            .relative = ...;
            .lightsCount = ...;
            .bonesCount = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_universal_vs_params, &SG_RANGE(vs_params));

    Bind slot and C-struct for uniform block 'vs_material':

        universal_vs_material_t vs_material = {
            .ambient = ...;
            .diffuse = ...;
            .emissive = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_universal_vs_material, &SG_RANGE(vs_material));

    Bind slot and C-struct for uniform block 'vs_lights':

        universal_vs_lights_t vs_lights = {
            .position = ...;
            .dir = ...;
            .ambient = ...;
            .diffuse = ...;
            .range = ...;
            .cone = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_universal_vs_lights, &SG_RANGE(vs_lights));

    Bind slot and C-struct for uniform block 'fs_params':

        universal_fs_params_t fs_params = {
            .envMode = ...;
            .envRatio = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_universal_fs_params, &SG_RANGE(fs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_universal_vs_aPos (0)
#define ATTR_universal_vs_aNormal (1)
#define ATTR_universal_vs_aTexCoord (2)
#define ATTR_universal_vs_aIndexes (3)
#define ATTR_universal_vs_aWeights (4)
#define SLOT_universal_diffuseSampler (0)
#define SLOT_universal_alphaSampler (1)
#define SLOT_universal_envSampler (2)
#define SLOT_universal_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct universal_vs_params_t {
    glm::mat4 model;
    glm::mat4 view;
    glm::mat4 projection;
    glm::mat4 bones[20];
    glm::vec3 viewPos;
    float billboard;
    float relative;
    float lightsCount;
    float bonesCount;
    uint8_t _pad_1500[4];
} universal_vs_params_t;
#pragma pack(pop)
#define SLOT_universal_vs_material (1)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct universal_vs_material_t {
    glm::vec4 ambient;
    glm::vec4 diffuse;
    glm::vec4 emissive;
} universal_vs_material_t;
#pragma pack(pop)
#define SLOT_universal_vs_lights (2)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct universal_vs_lights_t {
    glm::vec4 position[15];
    glm::vec4 dir[15];
    glm::vec4 ambient[15];
    glm::vec4 diffuse[15];
    glm::vec4 range[15];
    glm::vec4 cone[15];
} universal_vs_lights_t;
#pragma pack(pop)
#define SLOT_universal_fs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct universal_fs_params_t {
    float envMode;
    float envRatio;
    uint8_t _pad_8[8];
} universal_fs_params_t;
#pragma pack(pop)
/*
    #version 330
    
    struct material_t
    {
        vec3 ambient;
        vec3 diffuse;
        vec3 specular;
    };
    
    struct light_t
    {
        int type;
        vec3 position;
        vec3 dir;
        vec3 ambient;
        vec3 diffuse;
        vec2 range;
        vec2 cone;
    };
    
    uniform vec4 vs_params[94];
    uniform vec4 vs_material[3];
    uniform vec4 vs_lights[90];
    layout(location = 0) in vec3 aPos;
    layout(location = 1) in vec3 aNormal;
    layout(location = 3) in vec2 aIndexes;
    layout(location = 4) in vec2 aWeights;
    out vec3 FragPos;
    out vec3 ViewDir;
    out vec3 Env;
    out vec3 Norm;
    out vec2 TexCoord;
    layout(location = 2) in vec2 aTexCoord;
    out vec4 Fog;
    out vec3 Light;
    out vec4 ViewSpace;
    
    vec3 _442;
    
    material_t getMaterial()
    {
        return material_t(vs_material[0].xyz, vs_material[1].xyz, vs_material[2].xyz);
    }
    
    light_t getLight(int index)
    {
        return light_t(int(vs_lights[index * 1 + 0].w), vs_lights[index * 1 + 0].xyz, vs_lights[index * 1 + 15].xyz, vs_lights[index * 1 + 30].xyz, vs_lights[index * 1 + 45].xyz, vs_lights[index * 1 + 60].xy, vs_lights[index * 1 + 75].xy);
    }
    
    vec3 computeLight(light_t light, vec3 normal, vec3 fragPos, vec3 viewDir, material_t mat)
    {
        switch (light.type)
        {
            case 2:
            {
                return light.ambient;
            }
            case 0:
            {
                return light.diffuse * (mat.diffuse * clamp(dot(normalize(normal), normalize(normalize(-light.dir))), 0.0, 1.0));
            }
            case 1:
            {
                vec3 _381 = light.position - fragPos;
                float _384 = length(_381);
                float dist = _384;
                if (_384 <= light.range.x)
                {
                    dist = 1.0;
                }
                else
                {
                    if (dist < light.range.y)
                    {
                        dist = (((dist - light.range.x) / (light.range.y - light.range.x)) * (-1.0)) + 1.0;
                    }
                    else
                    {
                        dist = 0.0;
                    }
                }
                return ((light.diffuse * max(dot(normalize(_381), normalize(normal)), 0.0)) * dist) * mat.diffuse;
            }
            case 3:
            {
                break;
            }
            default:
            {
                return vec3(0.0);
            }
        }
    }
    
    void main()
    {
        vec3 newVertex = aPos;
        vec3 newNormal = aNormal;
        if (int(vs_params[93].z) > 0)
        {
            int _69 = int(aIndexes.x);
            mat4 _72 = mat4(vs_params[_69 * 4 + 12], vs_params[_69 * 4 + 13], vs_params[_69 * 4 + 14], vs_params[_69 * 4 + 15]);
            int _77 = int(aIndexes.y);
            mat4 _79 = mat4(vs_params[_77 * 4 + 12], vs_params[_77 * 4 + 13], vs_params[_77 * 4 + 14], vs_params[_77 * 4 + 15]);
            vec4 _86 = vec4(aPos, 1.0);
            newVertex = ((_72 * _86).xyz * aWeights.x) + ((_79 * _86).xyz * aWeights.y);
            vec4 _113 = vec4(aNormal, 0.0);
            newNormal = ((_72 * _113).xyz * aWeights.x) + ((_79 * _113).xyz * aWeights.y);
        }
        mat4 _137 = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]);
        FragPos = vec3((_137 * vec4(newVertex, 1.0)).xyz);
        ViewDir = normalize(FragPos - vs_params[92].xyz);
        Env = reflect(ViewDir, normalize(newNormal)) * vec3(1.0, -1.0, 1.0);
        mat4 _168 = transpose(inverse(_137));
        Norm = normalize(mat3(_168[0].xyz, _168[1].xyz, _168[2].xyz) * newNormal);
        TexCoord = aTexCoord;
        Fog = vec4(0.0);
        vec3 light = vec3(0.0);
        for (int i = 0; i < int(vs_params[93].y); i++)
        {
            int param = i;
            light_t param_1 = getLight(param);
            vec3 param_2 = Norm;
            vec3 param_3 = FragPos;
            vec3 param_4 = ViewDir;
            material_t param_5 = getMaterial();
            light += computeLight(param_1, param_2, param_3, param_4, param_5);
        }
        Light = light;
        mat4 viewMat = mat4(vs_params[4], vs_params[5], vs_params[6], vs_params[7]);
        if (int(vs_params[93].x) > 0)
        {
            mat4 _455 = viewMat;
            _455[3] = vec4(0.0, 0.0, 0.0, 1.0);
            viewMat = _455;
        }
        mat4 modelView = viewMat * _137;
        if (int(vs_params[92].w) > 0)
        {
            mat4 _457 = modelView;
            _457[0].x = length(vec3(vs_params[0].xyz));
            mat4 _459 = _457;
            _459[0].y = 0.0;
            mat4 _461 = _459;
            _461[0].z = 0.0;
            mat4 _463 = _461;
            _463[2].x = 0.0;
            mat4 _465 = _463;
            _465[2].y = 0.0;
            mat4 _467 = _465;
            _467[2].z = 1.0;
            modelView = _467;
        }
        vec4 _270 = vec4(newVertex, 1.0);
        ViewSpace = modelView * _270;
        gl_Position = (mat4(vs_params[8], vs_params[9], vs_params[10], vs_params[11]) * modelView) * _270;
    }
    
*/
static const char universal_vs_source_glsl330[4548] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x5f,0x74,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x6d,0x62,0x69,0x65,
    0x6e,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x64,0x69,0x66,
    0x66,0x75,0x73,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x73,
    0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,
    0x75,0x63,0x74,0x20,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x6e,0x74,0x20,0x74,0x79,0x70,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x64,0x69,0x72,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x72,0x61,0x6e,0x67,0x65,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x63,0x6f,0x6e,0x65,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,
    0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x39,0x34,0x5d,0x3b,0x0a,
    0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,
    0x6d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x5b,0x33,0x5d,0x3b,0x0a,0x75,0x6e,0x69,
    0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x6c,0x69,0x67,
    0x68,0x74,0x73,0x5b,0x39,0x30,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x50,0x6f,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,
    0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x4e,0x6f,0x72,0x6d,0x61,0x6c,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x61,
    0x49,0x6e,0x64,0x65,0x78,0x65,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x34,0x29,0x20,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x32,0x20,0x61,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x3b,0x0a,
    0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x46,0x72,0x61,0x67,0x50,0x6f,0x73,
    0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x56,0x69,0x65,0x77,0x44,
    0x69,0x72,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x45,0x6e,0x76,
    0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x4e,0x6f,0x72,0x6d,0x3b,
    0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,
    0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,
    0x20,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6f,0x75,0x74,0x20,
    0x76,0x65,0x63,0x34,0x20,0x46,0x6f,0x67,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x33,0x20,0x4c,0x69,0x67,0x68,0x74,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x34,0x20,0x56,0x69,0x65,0x77,0x53,0x70,0x61,0x63,0x65,0x3b,0x0a,0x0a,0x76,
    0x65,0x63,0x33,0x20,0x5f,0x34,0x34,0x32,0x3b,0x0a,0x0a,0x6d,0x61,0x74,0x65,0x72,
    0x69,0x61,0x6c,0x5f,0x74,0x20,0x67,0x65,0x74,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,
    0x6c,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,
    0x20,0x6d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x5f,0x74,0x28,0x76,0x73,0x5f,0x6d,
    0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,
    0x76,0x73,0x5f,0x6d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x5b,0x31,0x5d,0x2e,0x78,
    0x79,0x7a,0x2c,0x20,0x76,0x73,0x5f,0x6d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x5b,
    0x32,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x6c,0x69,0x67,0x68,
    0x74,0x5f,0x74,0x20,0x67,0x65,0x74,0x4c,0x69,0x67,0x68,0x74,0x28,0x69,0x6e,0x74,
    0x20,0x69,0x6e,0x64,0x65,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x28,0x69,0x6e,0x74,
    0x28,0x76,0x73,0x5f,0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x69,0x6e,0x64,0x65,0x78,
    0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x30,0x5d,0x2e,0x77,0x29,0x2c,0x20,0x76,0x73,
    0x5f,0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x69,0x6e,0x64,0x65,0x78,0x20,0x2a,0x20,
    0x31,0x20,0x2b,0x20,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,0x73,0x5f,0x6c,
    0x69,0x67,0x68,0x74,0x73,0x5b,0x69,0x6e,0x64,0x65,0x78,0x20,0x2a,0x20,0x31,0x20,
    0x2b,0x20,0x31,0x35,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,0x73,0x5f,0x6c,0x69,
    0x67,0x68,0x74,0x73,0x5b,0x69,0x6e,0x64,0x65,0x78,0x20,0x2a,0x20,0x31,0x20,0x2b,
    0x20,0x33,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,0x73,0x5f,0x6c,0x69,0x67,
    0x68,0x74,0x73,0x5b,0x69,0x6e,0x64,0x65,0x78,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,
    0x34,0x35,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,0x73,0x5f,0x6c,0x69,0x67,0x68,
    0x74,0x73,0x5b,0x69,0x6e,0x64,0x65,0x78,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x36,
    0x30,0x5d,0x2e,0x78,0x79,0x2c,0x20,0x76,0x73,0x5f,0x6c,0x69,0x67,0x68,0x74,0x73,
    0x5b,0x69,0x6e,0x64,0x65,0x78,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x37,0x35,0x5d,
    0x2e,0x78,0x79,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x63,0x6f,
    0x6d,0x70,0x75,0x74,0x65,0x4c,0x69,0x67,0x68,0x74,0x28,0x6c,0x69,0x67,0x68,0x74,
    0x5f,0x74,0x20,0x6c,0x69,0x67,0x68,0x74,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x72,0x61,0x67,
    0x50,0x6f,0x73,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x69,0x65,0x77,0x44,0x69,
    0x72,0x2c,0x20,0x6d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x5f,0x74,0x20,0x6d,0x61,
    0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x73,0x77,0x69,0x74,0x63,0x68,0x20,
    0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x74,0x79,0x70,0x65,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,
    0x32,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x6c,0x69,0x67,0x68,0x74,0x2e,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x63,0x61,0x73,0x65,0x20,0x30,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x6c,0x69,0x67,0x68,0x74,0x2e,0x64,0x69,0x66,0x66,
    0x75,0x73,0x65,0x20,0x2a,0x20,0x28,0x6d,0x61,0x74,0x2e,0x64,0x69,0x66,0x66,0x75,
    0x73,0x65,0x20,0x2a,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x64,0x6f,0x74,0x28,0x6e,
    0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x29,
    0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x69,0x7a,0x65,0x28,0x2d,0x6c,0x69,0x67,0x68,0x74,0x2e,0x64,0x69,0x72,
    0x29,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x31,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x33,0x38,0x31,0x20,0x3d,0x20,0x6c,0x69,0x67,
    0x68,0x74,0x2e,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x2d,0x20,0x66,0x72,
    0x61,0x67,0x50,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x38,0x34,0x20,0x3d,0x20,
    0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x5f,0x33,0x38,0x31,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x64,0x69,0x73,0x74,0x20,0x3d,0x20,0x5f,0x33,0x38,0x34,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x38,
    0x34,0x20,0x3c,0x3d,0x20,0x6c,0x69,0x67,0x68,0x74,0x2e,0x72,0x61,0x6e,0x67,0x65,
    0x2e,0x78,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x64,0x69,0x73,0x74,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x64,
    0x69,0x73,0x74,0x20,0x3c,0x20,0x6c,0x69,0x67,0x68,0x74,0x2e,0x72,0x61,0x6e,0x67,
    0x65,0x2e,0x79,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x74,0x20,
    0x3d,0x20,0x28,0x28,0x28,0x64,0x69,0x73,0x74,0x20,0x2d,0x20,0x6c,0x69,0x67,0x68,
    0x74,0x2e,0x72,0x61,0x6e,0x67,0x65,0x2e,0x78,0x29,0x20,0x2f,0x20,0x28,0x6c,0x69,
    0x67,0x68,0x74,0x2e,0x72,0x61,0x6e,0x67,0x65,0x2e,0x79,0x20,0x2d,0x20,0x6c,0x69,
    0x67,0x68,0x74,0x2e,0x72,0x61,0x6e,0x67,0x65,0x2e,0x78,0x29,0x29,0x20,0x2a,0x20,
    0x28,0x2d,0x31,0x2e,0x30,0x29,0x29,0x20,0x2b,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x74,
    0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x28,0x6c,0x69,0x67,
    0x68,0x74,0x2e,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x20,0x2a,0x20,0x6d,0x61,0x78,
    0x28,0x64,0x6f,0x74,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x5f,
    0x33,0x38,0x31,0x29,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x20,
    0x2a,0x20,0x64,0x69,0x73,0x74,0x29,0x20,0x2a,0x20,0x6d,0x61,0x74,0x2e,0x64,0x69,
    0x66,0x66,0x75,0x73,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x61,0x73,0x65,0x20,0x33,0x3a,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x72,0x65,0x61,0x6b,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x64,0x65,0x66,0x61,0x75,0x6c,0x74,0x3a,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x33,0x28,0x30,0x2e,0x30,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x65,0x77,0x56,0x65,
    0x72,0x74,0x65,0x78,0x20,0x3d,0x20,0x61,0x50,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x65,0x77,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x20,
    0x3d,0x20,0x61,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x69,0x6e,0x74,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x39,0x33,0x5d,0x2e,0x7a,0x29,0x20,0x3e,0x20,0x30,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,
    0x36,0x39,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x61,0x49,0x6e,0x64,0x65,0x78,0x65,
    0x73,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6d,0x61,
    0x74,0x34,0x20,0x5f,0x37,0x32,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x5f,0x36,0x39,0x20,0x2a,0x20,0x34,0x20,
    0x2b,0x20,0x31,0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x5f,0x36,0x39,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x31,0x33,0x5d,0x2c,0x20,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x5f,0x36,0x39,0x20,0x2a,0x20,
    0x34,0x20,0x2b,0x20,0x31,0x34,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x5f,0x36,0x39,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x31,0x35,0x5d,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,
    0x37,0x37,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x61,0x49,0x6e,0x64,0x65,0x78,0x65,
    0x73,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6d,0x61,
    0x74,0x34,0x20,0x5f,0x37,0x39,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x5f,0x37,0x37,0x20,0x2a,0x20,0x34,0x20,
    0x2b,0x20,0x31,0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x5f,0x37,0x37,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x31,0x33,0x5d,0x2c,0x20,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x5f,0x37,0x37,0x20,0x2a,0x20,
    0x34,0x20,0x2b,0x20,0x31,0x34,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x73,0x5b,0x5f,0x37,0x37,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x31,0x35,0x5d,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,
    0x5f,0x38,0x36,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x61,0x50,0x6f,0x73,0x2c,
    0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6e,
    0x65,0x77,0x56,0x65,0x72,0x74,0x65,0x78,0x20,0x3d,0x20,0x28,0x28,0x5f,0x37,0x32,
    0x20,0x2a,0x20,0x5f,0x38,0x36,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x61,0x57,
    0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x78,0x29,0x20,0x2b,0x20,0x28,0x28,0x5f,0x37,
    0x39,0x20,0x2a,0x20,0x5f,0x38,0x36,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x61,
    0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x31,0x33,0x20,0x3d,0x20,
    0x76,0x65,0x63,0x34,0x28,0x61,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x30,0x2e,
    0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6e,0x65,0x77,0x4e,
    0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3d,0x20,0x28,0x28,0x5f,0x37,0x32,0x20,0x2a,0x20,
    0x5f,0x31,0x31,0x33,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x61,0x57,0x65,0x69,
    0x67,0x68,0x74,0x73,0x2e,0x78,0x29,0x20,0x2b,0x20,0x28,0x28,0x5f,0x37,0x39,0x20,
    0x2a,0x20,0x5f,0x31,0x31,0x33,0x29,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x61,0x57,
    0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x31,0x33,0x37,0x20,0x3d,
    0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,
    0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x46,0x72,0x61,0x67,0x50,0x6f,0x73,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x33,0x28,0x28,0x5f,0x31,0x33,0x37,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,0x28,0x6e,
    0x65,0x77,0x56,0x65,0x72,0x74,0x65,0x78,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,
    0x78,0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x56,0x69,0x65,0x77,0x44,0x69,
    0x72,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x46,0x72,
    0x61,0x67,0x50,0x6f,0x73,0x20,0x2d,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x39,0x32,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x45,0x6e,0x76,0x20,0x3d,0x20,0x72,0x65,0x66,0x6c,0x65,0x63,0x74,0x28,0x56,0x69,
    0x65,0x77,0x44,0x69,0x72,0x2c,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,
    0x28,0x6e,0x65,0x77,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x29,0x29,0x20,0x2a,0x20,0x76,
    0x65,0x63,0x33,0x28,0x31,0x2e,0x30,0x2c,0x20,0x2d,0x31,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x31,
    0x36,0x38,0x20,0x3d,0x20,0x74,0x72,0x61,0x6e,0x73,0x70,0x6f,0x73,0x65,0x28,0x69,
    0x6e,0x76,0x65,0x72,0x73,0x65,0x28,0x5f,0x31,0x33,0x37,0x29,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x4e,0x6f,0x72,0x6d,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x69,0x7a,0x65,0x28,0x6d,0x61,0x74,0x33,0x28,0x5f,0x31,0x36,0x38,0x5b,0x30,0x5d,
    0x2e,0x78,0x79,0x7a,0x2c,0x20,0x5f,0x31,0x36,0x38,0x5b,0x31,0x5d,0x2e,0x78,0x79,
    0x7a,0x2c,0x20,0x5f,0x31,0x36,0x38,0x5b,0x32,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x20,
    0x2a,0x20,0x6e,0x65,0x77,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x61,0x54,0x65,
    0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x46,0x6f,0x67,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x33,0x20,0x6c,0x69,0x67,0x68,0x74,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x33,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6f,0x72,
    0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x20,0x3d,0x20,0x30,0x3b,0x20,0x69,0x20,0x3c,
    0x20,0x69,0x6e,0x74,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x39,
    0x33,0x5d,0x2e,0x79,0x29,0x3b,0x20,0x69,0x2b,0x2b,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x20,0x3d,0x20,0x69,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x20,0x3d,0x20,0x67,0x65,0x74,0x4c,0x69,0x67,0x68,0x74,0x28,0x70,0x61,0x72,0x61,
    0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x4e,0x6f,0x72,0x6d,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x46,0x72,0x61,0x67,0x50,0x6f,0x73,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x34,0x20,0x3d,0x20,0x56,0x69,0x65,0x77,0x44,0x69,0x72,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x65,0x72,0x69,0x61,
    0x6c,0x5f,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x20,0x3d,0x20,0x67,0x65,
    0x74,0x4d,0x61,0x74,0x65,0x72,0x69,0x61,0x6c,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x6c,0x69,0x67,0x68,0x74,0x20,0x2b,0x3d,0x20,0x63,0x6f,
    0x6d,0x70,0x75,0x74,0x65,0x4c,0x69,0x67,0x68,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x33,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x2c,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x4c,0x69,0x67,0x68,0x74,0x20,0x3d,0x20,0x6c,0x69,0x67,0x68,0x74,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x76,0x69,0x65,0x77,0x4d,
    0x61,0x74,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x5b,0x35,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x36,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x37,0x5d,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x69,0x6e,0x74,0x28,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x39,0x33,0x5d,0x2e,0x78,0x29,0x20,
    0x3e,0x20,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x34,0x35,0x35,0x20,0x3d,0x20,0x76,
    0x69,0x65,0x77,0x4d,0x61,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x5f,0x34,0x35,0x35,0x5b,0x33,0x5d,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x30,
    0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x69,0x65,0x77,
    0x4d,0x61,0x74,0x20,0x3d,0x20,0x5f,0x34,0x35,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x6d,0x6f,0x64,0x65,0x6c,
    0x56,0x69,0x65,0x77,0x20,0x3d,0x20,0x76,0x69,0x65,0x77,0x4d,0x61,0x74,0x20,0x2a,
    0x20,0x5f,0x31,0x33,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x69,
    0x6e,0x74,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x39,0x32,0x5d,
    0x2e,0x77,0x29,0x20,0x3e,0x20,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x34,0x35,0x37,
    0x20,0x3d,0x20,0x6d,0x6f,0x64,0x65,0x6c,0x56,0x69,0x65,0x77,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x34,0x35,0x37,0x5b,0x30,0x5d,0x2e,0x78,0x20,
    0x3d,0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x76,0x65,0x63,0x33,0x28,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,
    0x34,0x35,0x39,0x20,0x3d,0x20,0x5f,0x34,0x35,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x5f,0x34,0x35,0x39,0x5b,0x30,0x5d,0x2e,0x79,0x20,0x3d,0x20,
    0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,
    0x34,0x20,0x5f,0x34,0x36,0x31,0x20,0x3d,0x20,0x5f,0x34,0x35,0x39,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x34,0x36,0x31,0x5b,0x30,0x5d,0x2e,0x7a,
    0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x6d,0x61,0x74,0x34,0x20,0x5f,0x34,0x36,0x33,0x20,0x3d,0x20,0x5f,0x34,0x36,0x31,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x34,0x36,0x33,0x5b,0x32,
    0x5d,0x2e,0x78,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x34,0x36,0x35,0x20,0x3d,0x20,0x5f,
    0x34,0x36,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x34,0x36,
    0x35,0x5b,0x32,0x5d,0x2e,0x79,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x34,0x36,0x37,0x20,
    0x3d,0x20,0x5f,0x34,0x36,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x5f,0x34,0x36,0x37,0x5b,0x32,0x5d,0x2e,0x7a,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6d,0x6f,0x64,0x65,0x6c,0x56,0x69,
    0x65,0x77,0x20,0x3d,0x20,0x5f,0x34,0x36,0x37,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,0x37,0x30,0x20,0x3d,
    0x20,0x76,0x65,0x63,0x34,0x28,0x6e,0x65,0x77,0x56,0x65,0x72,0x74,0x65,0x78,0x2c,
    0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x56,0x69,0x65,0x77,0x53,
    0x70,0x61,0x63,0x65,0x20,0x3d,0x20,0x6d,0x6f,0x64,0x65,0x6c,0x56,0x69,0x65,0x77,
    0x20,0x2a,0x20,0x5f,0x32,0x37,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,0x6d,0x61,0x74,0x34,
    0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x38,0x5d,0x2c,0x20,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x39,0x5d,0x2c,0x20,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x31,0x5d,0x29,0x20,0x2a,0x20,0x6d,0x6f,0x64,
    0x65,0x6c,0x56,0x69,0x65,0x77,0x29,0x20,0x2a,0x20,0x5f,0x32,0x37,0x30,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 fs_params[1];
    uniform sampler2D diffuseSampler;
    uniform sampler2D alphaSampler;
    uniform sampler2D envSampler;
    
    in vec2 TexCoord;
    in vec3 Light;
    in vec3 Env;
    in vec4 Fog;
    layout(location = 0) out vec4 FragColor;
    in vec3 FragPos;
    in vec3 Norm;
    in vec3 ViewDir;
    in vec4 ViewSpace;
    
    void main()
    {
        vec4 _21 = texture(diffuseSampler, TexCoord);
        vec4 _26 = texture(alphaSampler, TexCoord);
        if (_21.w != 1.0)
        {
            discard;
        }
        vec4 _174 = vec4(Light, 1.0) * _21;
        _174.w = ((_26.x + _26.y) + _26.z) * 0.3333333432674407958984375;
        vec3 _80 = normalize(vec3(Env.x, max(((Env.y - 1.0) * 0.64999997615814208984375) + 1.0, 0.0), Env.z));
        vec4 _99 = texture(envSampler, (_80.xz / vec2(2.0 * (1.0 + _80.y))) + vec2(0.5));
        int _108 = int(fs_params[0].x);
        vec4 envBlended;
        if (_108 == 0)
        {
            envBlended = mix(_174, _99, vec4(fs_params[0].y));
        }
        else
        {
            if (_108 == 1)
            {
                envBlended = _174 * _99;
            }
            else
            {
                if (_108 == 2)
                {
                    envBlended = _174 + _99;
                }
                else
                {
                    envBlended = _174;
                }
            }
        }
        if (length(Fog) > 0.0)
        {
            FragColor = mix(envBlended, vec4(Fog.xyz, 1.0), vec4(Fog.w));
        }
        else
        {
            FragColor = envBlended;
        }
    }
    
*/
static const char universal_fs_source_glsl330[1395] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x64,0x69,0x66,0x66,0x75,
    0x73,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x61,0x6c,0x70,
    0x68,0x61,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x65,0x6e,0x76,
    0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x32,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x33,0x20,0x4c,0x69,0x67,0x68,0x74,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x33,0x20,0x45,0x6e,0x76,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,
    0x46,0x6f,0x67,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x34,0x20,0x46,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x33,0x20,0x46,0x72,0x61,0x67,0x50,0x6f,0x73,0x3b,0x0a,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x4e,0x6f,0x72,0x6d,0x3b,0x0a,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x33,0x20,0x56,0x69,0x65,0x77,0x44,0x69,0x72,0x3b,0x0a,0x69,0x6e,
    0x20,0x76,0x65,0x63,0x34,0x20,0x56,0x69,0x65,0x77,0x53,0x70,0x61,0x63,0x65,0x3b,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,0x31,0x20,0x3d,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x53,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,0x36,0x20,0x3d,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x61,0x6c,0x70,0x68,0x61,0x53,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x31,0x2e,0x77,0x20,
    0x21,0x3d,0x20,0x31,0x2e,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,
    0x37,0x34,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x4c,0x69,0x67,0x68,0x74,0x2c,
    0x20,0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,0x5f,0x32,0x31,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x5f,0x31,0x37,0x34,0x2e,0x77,0x20,0x3d,0x20,0x28,0x28,0x5f,0x32,0x36,0x2e,
    0x78,0x20,0x2b,0x20,0x5f,0x32,0x36,0x2e,0x79,0x29,0x20,0x2b,0x20,0x5f,0x32,0x36,
    0x2e,0x7a,0x29,0x20,0x2a,0x20,0x30,0x2e,0x33,0x33,0x33,0x33,0x33,0x33,0x33,0x34,
    0x33,0x32,0x36,0x37,0x34,0x34,0x30,0x37,0x39,0x35,0x38,0x39,0x38,0x34,0x33,0x37,
    0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x38,0x30,0x20,
    0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x76,0x65,0x63,0x33,
    0x28,0x45,0x6e,0x76,0x2e,0x78,0x2c,0x20,0x6d,0x61,0x78,0x28,0x28,0x28,0x45,0x6e,
    0x76,0x2e,0x79,0x20,0x2d,0x20,0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,0x30,0x2e,0x36,
    0x34,0x39,0x39,0x39,0x39,0x39,0x37,0x36,0x31,0x35,0x38,0x31,0x34,0x32,0x30,0x38,
    0x39,0x38,0x34,0x33,0x37,0x35,0x29,0x20,0x2b,0x20,0x31,0x2e,0x30,0x2c,0x20,0x30,
    0x2e,0x30,0x29,0x2c,0x20,0x45,0x6e,0x76,0x2e,0x7a,0x29,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x39,0x39,0x20,0x3d,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x28,0x65,0x6e,0x76,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,
    0x20,0x28,0x5f,0x38,0x30,0x2e,0x78,0x7a,0x20,0x2f,0x20,0x76,0x65,0x63,0x32,0x28,
    0x32,0x2e,0x30,0x20,0x2a,0x20,0x28,0x31,0x2e,0x30,0x20,0x2b,0x20,0x5f,0x38,0x30,
    0x2e,0x79,0x29,0x29,0x29,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x35,
    0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x31,0x30,0x38,
    0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x5b,0x30,0x5d,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,
    0x20,0x65,0x6e,0x76,0x42,0x6c,0x65,0x6e,0x64,0x65,0x64,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x30,0x38,0x20,0x3d,0x3d,0x20,0x30,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6e,
    0x76,0x42,0x6c,0x65,0x6e,0x64,0x65,0x64,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x5f,
    0x31,0x37,0x34,0x2c,0x20,0x5f,0x39,0x39,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x66,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x79,0x29,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x5f,0x31,0x30,0x38,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x65,0x6e,0x76,0x42,0x6c,0x65,0x6e,0x64,0x65,0x64,0x20,0x3d,0x20,
    0x5f,0x31,0x37,0x34,0x20,0x2a,0x20,0x5f,0x39,0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,
    0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x30,
    0x38,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6e,0x76,0x42,0x6c,0x65,0x6e,0x64,0x65,0x64,
    0x20,0x3d,0x20,0x5f,0x31,0x37,0x34,0x20,0x2b,0x20,0x5f,0x39,0x39,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6e,0x76,0x42,
    0x6c,0x65,0x6e,0x64,0x65,0x64,0x20,0x3d,0x20,0x5f,0x31,0x37,0x34,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x46,0x6f,0x67,0x29,
    0x20,0x3e,0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x46,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x6d,0x69,0x78,0x28,0x65,0x6e,0x76,0x42,0x6c,0x65,0x6e,0x64,0x65,0x64,
    0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x46,0x6f,0x67,0x2e,0x78,0x79,0x7a,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x46,0x6f,0x67,0x2e,0x77,
    0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,
    0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x46,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x65,0x6e,0x76,
    0x42,0x6c,0x65,0x6e,0x64,0x65,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before shader_universal.h"
#endif
static inline const sg_shader_desc* universal_universal_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPos";
      desc.attrs[1].name = "aNormal";
      desc.attrs[2].name = "aTexCoord";
      desc.attrs[3].name = "aIndexes";
      desc.attrs[4].name = "aWeights";
      desc.vs.source = universal_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 1504;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 94;
      desc.vs.uniform_blocks[1].size = 48;
      desc.vs.uniform_blocks[1].uniforms[0].name = "vs_material";
      desc.vs.uniform_blocks[1].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[1].uniforms[0].array_count = 3;
      desc.vs.uniform_blocks[2].size = 1440;
      desc.vs.uniform_blocks[2].uniforms[0].name = "vs_lights";
      desc.vs.uniform_blocks[2].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[2].uniforms[0].array_count = 90;
      desc.fs.source = universal_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 16;
      desc.fs.uniform_blocks[0].uniforms[0].name = "fs_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.images[0].name = "diffuseSampler";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "alphaSampler";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[2].name = "envSampler";
      desc.fs.images[2].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[2].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "universal_universal_shader";
    }
    return &desc;
  }
  return 0;
}
