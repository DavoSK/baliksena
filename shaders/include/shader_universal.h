#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input universal.glsl --output include/shader_universal.h --slang glsl330

    Overview:

        Shader program 'universal':
            Get shader desc: universal_universal_shader_desc(sg_query_backend());
            Vertex shader: vs
                Attribute slots:
                    ATTR_universal_vs_aPos = 0
                    ATTR_universal_vs_aNormal = 1
                    ATTR_universal_vs_aTexCoord = 2
                Uniform block 'vs_params':
                    C struct: universal_vs_params_t
                    Bind slot: SLOT_universal_vs_params = 0
            Fragment shader: fs
                Uniform block 'fs_params':
                    C struct: universal_fs_params_t
                    Bind slot: SLOT_universal_fs_params = 0
                Uniform block 'fs_dir_light':
                    C struct: universal_fs_dir_light_t
                    Bind slot: SLOT_universal_fs_dir_light = 1
                Uniform block 'fs_point_lights':
                    C struct: universal_fs_point_lights_t
                    Bind slot: SLOT_universal_fs_point_lights = 2
                Image 'diffuseSampler':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_universal_diffuseSampler = 0
                Image 'envSampler':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_universal_envSampler = 1


    Shader descriptor structs:

        sg_shader universal = sg_make_shader(universal_universal_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_universal_vs_aPos] = { ... },
                    [ATTR_universal_vs_aNormal] = { ... },
                    [ATTR_universal_vs_aTexCoord] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_universal_diffuseSampler = 0;
        SLOT_universal_envSampler = 1;

    Bind slot and C-struct for uniform block 'vs_params':

        universal_vs_params_t vs_params = {
            .model = ...;
            .view = ...;
            .projection = ...;
            .viewPos = ...;
            .billboard = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_universal_vs_params, &SG_RANGE(vs_params));

    Bind slot and C-struct for uniform block 'fs_params':

        universal_fs_params_t fs_params = {
            .pointLightsCount = ...;
            .envMode = ...;
            .envRatio = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_universal_fs_params, &SG_RANGE(fs_params));

    Bind slot and C-struct for uniform block 'fs_dir_light':

        universal_fs_dir_light_t fs_dir_light = {
            .direction = ...;
            .ambient = ...;
            .diffuse = ...;
            .specular = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_universal_fs_dir_light, &SG_RANGE(fs_dir_light));

    Bind slot and C-struct for uniform block 'fs_point_lights':

        universal_fs_point_lights_t fs_point_lights = {
            .position = ...;
            .ambient = ...;
            .diffuse = ...;
            .specular = ...;
            .range = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_universal_fs_point_lights, &SG_RANGE(fs_point_lights));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_universal_vs_aPos (0)
#define ATTR_universal_vs_aNormal (1)
#define ATTR_universal_vs_aTexCoord (2)
#define SLOT_universal_diffuseSampler (0)
#define SLOT_universal_envSampler (1)
#define SLOT_universal_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct universal_vs_params_t {
    glm::mat4 model;
    glm::mat4 view;
    glm::mat4 projection;
    glm::vec3 viewPos;
    float billboard;
} universal_vs_params_t;
#pragma pack(pop)
#define SLOT_universal_fs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct universal_fs_params_t {
    float pointLightsCount;
    float envMode;
    float envRatio;
    uint8_t _pad_12[4];
} universal_fs_params_t;
#pragma pack(pop)
#define SLOT_universal_fs_dir_light (1)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct universal_fs_dir_light_t {
    glm::vec3 direction;
    uint8_t _pad_12[4];
    glm::vec3 ambient;
    uint8_t _pad_28[4];
    glm::vec3 diffuse;
    uint8_t _pad_44[4];
    glm::vec3 specular;
    uint8_t _pad_60[4];
} universal_fs_dir_light_t;
#pragma pack(pop)
#define SLOT_universal_fs_point_lights (2)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct universal_fs_point_lights_t {
    glm::vec4 position[30];
    glm::vec4 ambient[30];
    glm::vec4 diffuse[30];
    glm::vec4 specular[30];
    glm::vec4 range[30];
} universal_fs_point_lights_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 vs_params[13];
    out vec3 FragPos;
    layout(location = 0) in vec3 aPos;
    out vec3 ViewDir;
    out vec3 Env;
    layout(location = 1) in vec3 aNormal;
    out vec3 Norm;
    out vec2 TexCoord;
    layout(location = 2) in vec2 aTexCoord;
    
    void main()
    {
        mat4 _21 = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]);
        vec4 _29 = vec4(aPos, 1.0);
        FragPos = vec3((_21 * _29).xyz);
        ViewDir = normalize(FragPos - vs_params[12].xyz);
        Env = reflect(ViewDir, normalize(aNormal)) * vec3(1.0, 1.0, -1.0);
        mat4 _56 = transpose(inverse(_21));
        Norm = normalize(mat3(_56[0].xyz, _56[1].xyz, _56[2].xyz) * aNormal);
        TexCoord = aTexCoord;
        mat4 modelView = mat4(vs_params[4], vs_params[5], vs_params[6], vs_params[7]) * _21;
        if (vs_params[12].w > 0.0)
        {
            mat4 _131 = modelView;
            _131[0].x = length(vec3(vs_params[0].xyz));
            mat4 _133 = _131;
            _133[0].y = 0.0;
            mat4 _135 = _133;
            _135[0].z = 0.0;
            mat4 _137 = _135;
            _137[2].x = 0.0;
            mat4 _139 = _137;
            _139[2].y = 0.0;
            mat4 _141 = _139;
            _141[2].z = 1.0;
            modelView = _141;
        }
        gl_Position = mat4(vs_params[8], vs_params[9], vs_params[10], vs_params[11]) * (modelView * _29);
    }
    
*/
static const char universal_vs_source_glsl330[1267] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x31,0x33,0x5d,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x33,0x20,0x46,0x72,0x61,0x67,0x50,0x6f,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
    0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x50,0x6f,0x73,0x3b,0x0a,0x6f,
    0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x56,0x69,0x65,0x77,0x44,0x69,0x72,0x3b,
    0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x45,0x6e,0x76,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x4e,0x6f,0x72,
    0x6d,0x61,0x6c,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x4e,0x6f,
    0x72,0x6d,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x54,0x65,0x78,
    0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x32,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x32,0x31,0x20,0x3d,0x20,0x6d,0x61,0x74,
    0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x34,0x20,0x5f,0x32,0x39,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x61,
    0x50,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x46,
    0x72,0x61,0x67,0x50,0x6f,0x73,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,0x28,0x5f,
    0x32,0x31,0x20,0x2a,0x20,0x5f,0x32,0x39,0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x56,0x69,0x65,0x77,0x44,0x69,0x72,0x20,0x3d,0x20,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x46,0x72,0x61,0x67,0x50,0x6f,0x73,0x20,
    0x2d,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x32,0x5d,0x2e,
    0x78,0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x45,0x6e,0x76,0x20,0x3d,0x20,
    0x72,0x65,0x66,0x6c,0x65,0x63,0x74,0x28,0x56,0x69,0x65,0x77,0x44,0x69,0x72,0x2c,
    0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x61,0x4e,0x6f,0x72,0x6d,
    0x61,0x6c,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,0x30,0x2c,
    0x20,0x31,0x2e,0x30,0x2c,0x20,0x2d,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x35,0x36,0x20,0x3d,0x20,0x74,0x72,0x61,0x6e,
    0x73,0x70,0x6f,0x73,0x65,0x28,0x69,0x6e,0x76,0x65,0x72,0x73,0x65,0x28,0x5f,0x32,
    0x31,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x4e,0x6f,0x72,0x6d,0x20,0x3d,0x20,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x6d,0x61,0x74,0x33,0x28,0x5f,
    0x35,0x36,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x5f,0x35,0x36,0x5b,0x31,
    0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x5f,0x35,0x36,0x5b,0x32,0x5d,0x2e,0x78,0x79,
    0x7a,0x29,0x20,0x2a,0x20,0x61,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x61,0x54,
    0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,
    0x34,0x20,0x6d,0x6f,0x64,0x65,0x6c,0x56,0x69,0x65,0x77,0x20,0x3d,0x20,0x6d,0x61,
    0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2c,
    0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x2c,0x20,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x36,0x5d,0x2c,0x20,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x20,0x2a,0x20,0x5f,0x32,0x31,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x31,0x32,0x5d,0x2e,0x77,0x20,0x3e,0x20,0x30,0x2e,0x30,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6d,
    0x61,0x74,0x34,0x20,0x5f,0x31,0x33,0x31,0x20,0x3d,0x20,0x6d,0x6f,0x64,0x65,0x6c,
    0x56,0x69,0x65,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,
    0x33,0x31,0x5b,0x30,0x5d,0x2e,0x78,0x20,0x3d,0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,
    0x28,0x76,0x65,0x63,0x33,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x30,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x31,0x33,0x33,0x20,0x3d,0x20,0x5f,0x31,
    0x33,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x33,0x33,
    0x5b,0x30,0x5d,0x2e,0x79,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x31,0x33,0x35,0x20,0x3d,
    0x20,0x5f,0x31,0x33,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,
    0x31,0x33,0x35,0x5b,0x30,0x5d,0x2e,0x7a,0x20,0x3d,0x20,0x30,0x2e,0x30,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x31,0x33,
    0x37,0x20,0x3d,0x20,0x5f,0x31,0x33,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x5f,0x31,0x33,0x37,0x5b,0x32,0x5d,0x2e,0x78,0x20,0x3d,0x20,0x30,0x2e,
    0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,
    0x5f,0x31,0x33,0x39,0x20,0x3d,0x20,0x5f,0x31,0x33,0x37,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x33,0x39,0x5b,0x32,0x5d,0x2e,0x79,0x20,0x3d,
    0x20,0x30,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6d,0x61,
    0x74,0x34,0x20,0x5f,0x31,0x34,0x31,0x20,0x3d,0x20,0x5f,0x31,0x33,0x39,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x31,0x34,0x31,0x5b,0x32,0x5d,0x2e,
    0x7a,0x20,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x6d,0x6f,0x64,0x65,0x6c,0x56,0x69,0x65,0x77,0x20,0x3d,0x20,0x5f,0x31,0x34,
    0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x38,0x5d,0x2c,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x39,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x30,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x31,0x31,0x5d,0x29,0x20,0x2a,0x20,0x28,0x6d,0x6f,0x64,
    0x65,0x6c,0x56,0x69,0x65,0x77,0x20,0x2a,0x20,0x5f,0x32,0x39,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
/*
    #version 330
    
    struct dir_light_t
    {
        vec3 direction;
        vec3 ambient;
        vec3 diffuse;
        vec3 specular;
    };
    
    struct point_light_t
    {
        vec3 position;
        vec3 ambient;
        vec3 diffuse;
        vec3 specular;
        float range;
    };
    
    uniform vec4 fs_params[1];
    uniform vec4 fs_dir_light[4];
    uniform vec4 fs_point_lights[150];
    uniform sampler2D diffuseSampler;
    uniform sampler2D envSampler;
    
    in vec2 TexCoord;
    in vec3 Norm;
    in vec3 ViewDir;
    in vec3 FragPos;
    in vec3 Env;
    layout(location = 0) out vec4 FragColor;
    
    point_light_t _253;
    
    dir_light_t getDirLight()
    {
        return dir_light_t(fs_dir_light[0].xyz, fs_dir_light[1].xyz, fs_dir_light[2].xyz, fs_dir_light[3].xyz);
    }
    
    vec3 calcDirLight(dir_light_t light, vec3 normal, vec3 viewDir)
    {
        return light.ambient + (light.diffuse * max(dot(normal, normalize(-light.direction)), 0.0));
    }
    
    point_light_t getPointLight(int index)
    {
        for (int i = 0; i < 30; i++)
        {
            if (i == index)
            {
                return point_light_t(fs_point_lights[i * 1 + 0].xyz, fs_point_lights[i * 1 + 30].xyz, fs_point_lights[i * 1 + 60].xyz, fs_point_lights[i * 1 + 90].xyz, fs_point_lights[i * 1 + 120].x);
            }
        }
    }
    
    vec3 calcPointLight(point_light_t light, vec3 normal, vec3 fragPos, vec3 viewDir)
    {
        float _309 = 1.0 - (length(light.position - fragPos) / light.range);
        return (light.ambient * _309) + ((light.diffuse * max(dot(normal, normalize(light.position - fragPos)), 0.0)) * _309);
    }
    
    void main()
    {
        vec4 _49 = texture(diffuseSampler, TexCoord);
        if (_49.w != 1.0)
        {
            discard;
        }
        dir_light_t param = getDirLight();
        vec3 param_1 = Norm;
        vec3 param_2 = ViewDir;
        vec3 light = calcDirLight(param, param_1, param_2);
        for (int i = 0; i < int(fs_params[0].x); i++)
        {
            int param_3 = i;
            point_light_t param_4 = getPointLight(param_3);
            vec3 param_5 = Norm;
            vec3 param_6 = FragPos;
            vec3 param_7 = ViewDir;
            light += calcPointLight(param_4, param_5, param_6, param_7);
        }
        vec4 _112 = vec4(light, 1.0) * _49;
        vec3 _132 = normalize(vec3(Env.x, max(((Env.y - 1.0) * 0.64999997615814208984375) + 1.0, 0.0), Env.z));
        vec4 _151 = texture(envSampler, (_132.xz / vec2(2.0 * (1.0 + _132.y))) + vec2(0.5));
        int _154 = int(fs_params[0].y);
        if (_154 == 0)
        {
            FragColor = mix(_112, _151, vec4(fs_params[0].z));
        }
        else
        {
            if (_154 == 1)
            {
                FragColor = _112 * _151;
            }
            else
            {
                if (_154 == 2)
                {
                    FragColor = _112 + _151;
                }
                else
                {
                    FragColor = _112;
                }
            }
        }
    }
    
*/
static const char universal_fs_source_glsl330[2693] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x64,0x69,0x72,0x65,
    0x63,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,
    0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x33,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x33,0x20,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x70,0x6f,0x69,0x6e,0x74,0x5f,0x6c,
    0x69,0x67,0x68,0x74,0x5f,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x33,0x20,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x33,0x20,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,
    0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x72,0x61,0x6e,
    0x67,0x65,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,
    0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,
    0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,
    0x66,0x73,0x5f,0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5b,0x34,0x5d,0x3b,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,
    0x5f,0x70,0x6f,0x69,0x6e,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x31,0x35,
    0x30,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x32,0x44,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x53,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x65,0x6e,0x76,0x53,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x54,0x65,0x78,
    0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x4e,
    0x6f,0x72,0x6d,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x56,0x69,0x65,
    0x77,0x44,0x69,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x46,0x72,
    0x61,0x67,0x50,0x6f,0x73,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x45,
    0x6e,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,
    0x34,0x20,0x46,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x70,0x6f,
    0x69,0x6e,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x20,0x5f,0x32,0x35,0x33,
    0x3b,0x0a,0x0a,0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x20,0x67,
    0x65,0x74,0x44,0x69,0x72,0x4c,0x69,0x67,0x68,0x74,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x64,0x69,0x72,0x5f,0x6c,0x69,
    0x67,0x68,0x74,0x5f,0x74,0x28,0x66,0x73,0x5f,0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,
    0x68,0x74,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x66,0x73,0x5f,0x64,0x69,
    0x72,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,
    0x66,0x73,0x5f,0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5b,0x32,0x5d,0x2e,
    0x78,0x79,0x7a,0x2c,0x20,0x66,0x73,0x5f,0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,0x68,
    0x74,0x5b,0x33,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x65,
    0x63,0x33,0x20,0x63,0x61,0x6c,0x63,0x44,0x69,0x72,0x4c,0x69,0x67,0x68,0x74,0x28,
    0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x20,0x6c,0x69,0x67,0x68,
    0x74,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,
    0x76,0x65,0x63,0x33,0x20,0x76,0x69,0x65,0x77,0x44,0x69,0x72,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6c,0x69,0x67,0x68,0x74,
    0x2e,0x61,0x6d,0x62,0x69,0x65,0x6e,0x74,0x20,0x2b,0x20,0x28,0x6c,0x69,0x67,0x68,
    0x74,0x2e,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x20,0x2a,0x20,0x6d,0x61,0x78,0x28,
    0x64,0x6f,0x74,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,0x20,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x69,0x7a,0x65,0x28,0x2d,0x6c,0x69,0x67,0x68,0x74,0x2e,0x64,0x69,0x72,
    0x65,0x63,0x74,0x69,0x6f,0x6e,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x70,0x6f,0x69,0x6e,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,
    0x74,0x20,0x67,0x65,0x74,0x50,0x6f,0x69,0x6e,0x74,0x4c,0x69,0x67,0x68,0x74,0x28,
    0x69,0x6e,0x74,0x20,0x69,0x6e,0x64,0x65,0x78,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x20,0x3d,0x20,0x30,0x3b,
    0x20,0x69,0x20,0x3c,0x20,0x33,0x30,0x3b,0x20,0x69,0x2b,0x2b,0x29,0x0a,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x69,0x20,0x3d,0x3d,0x20,0x69,0x6e,0x64,0x65,0x78,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x70,0x6f,0x69,0x6e,0x74,0x5f,0x6c,
    0x69,0x67,0x68,0x74,0x5f,0x74,0x28,0x66,0x73,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x5f,
    0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x30,
    0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x66,0x73,0x5f,0x70,0x6f,0x69,0x6e,0x74,0x5f,
    0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,0x33,
    0x30,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x66,0x73,0x5f,0x70,0x6f,0x69,0x6e,0x74,
    0x5f,0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,0x2b,0x20,
    0x36,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x66,0x73,0x5f,0x70,0x6f,0x69,0x6e,
    0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,0x2b,
    0x20,0x39,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x66,0x73,0x5f,0x70,0x6f,0x69,
    0x6e,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x73,0x5b,0x69,0x20,0x2a,0x20,0x31,0x20,
    0x2b,0x20,0x31,0x32,0x30,0x5d,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x76,0x65,
    0x63,0x33,0x20,0x63,0x61,0x6c,0x63,0x50,0x6f,0x69,0x6e,0x74,0x4c,0x69,0x67,0x68,
    0x74,0x28,0x70,0x6f,0x69,0x6e,0x74,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x20,
    0x6c,0x69,0x67,0x68,0x74,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,
    0x61,0x6c,0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,
    0x2c,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x69,0x65,0x77,0x44,0x69,0x72,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x33,0x30,0x39,
    0x20,0x3d,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,0x28,0x6c,0x65,0x6e,0x67,0x74,0x68,
    0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x2d,0x20,0x66,0x72,0x61,0x67,0x50,0x6f,0x73,0x29,0x20,0x2f,0x20,0x6c,0x69,0x67,
    0x68,0x74,0x2e,0x72,0x61,0x6e,0x67,0x65,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,
    0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x61,0x6d,0x62,
    0x69,0x65,0x6e,0x74,0x20,0x2a,0x20,0x5f,0x33,0x30,0x39,0x29,0x20,0x2b,0x20,0x28,
    0x28,0x6c,0x69,0x67,0x68,0x74,0x2e,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x20,0x2a,
    0x20,0x6d,0x61,0x78,0x28,0x64,0x6f,0x74,0x28,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x2c,
    0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x6c,0x69,0x67,0x68,0x74,
    0x2e,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x2d,0x20,0x66,0x72,0x61,0x67,
    0x50,0x6f,0x73,0x29,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x5f,
    0x33,0x30,0x39,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,
    0x5f,0x34,0x39,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x64,0x69,
    0x66,0x66,0x75,0x73,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,
    0x78,0x43,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x34,0x39,0x2e,0x77,0x20,0x21,0x3d,0x20,0x31,0x2e,0x30,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,
    0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x64,0x69,0x72,0x5f,0x6c,0x69,0x67,0x68,0x74,0x5f,0x74,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x20,0x3d,0x20,0x67,0x65,0x74,0x44,0x69,0x72,0x4c,0x69,0x67,0x68,0x74,0x28,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x31,0x20,0x3d,0x20,0x4e,0x6f,0x72,0x6d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x56,
    0x69,0x65,0x77,0x44,0x69,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,
    0x20,0x6c,0x69,0x67,0x68,0x74,0x20,0x3d,0x20,0x63,0x61,0x6c,0x63,0x44,0x69,0x72,
    0x4c,0x69,0x67,0x68,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6f,0x72,0x20,0x28,0x69,0x6e,0x74,0x20,0x69,0x20,0x3d,
    0x20,0x30,0x3b,0x20,0x69,0x20,0x3c,0x20,0x69,0x6e,0x74,0x28,0x66,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x29,0x3b,0x20,0x69,0x2b,0x2b,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x69,0x6e,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x69,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x70,0x6f,0x69,0x6e,0x74,0x5f,0x6c,
    0x69,0x67,0x68,0x74,0x5f,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x20,0x3d,
    0x20,0x67,0x65,0x74,0x50,0x6f,0x69,0x6e,0x74,0x4c,0x69,0x67,0x68,0x74,0x28,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x35,0x20,0x3d,0x20,
    0x4e,0x6f,0x72,0x6d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x20,0x3d,0x20,0x46,0x72,0x61,
    0x67,0x50,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x33,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x37,0x20,0x3d,0x20,0x56,0x69,0x65,
    0x77,0x44,0x69,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,0x69,
    0x67,0x68,0x74,0x20,0x2b,0x3d,0x20,0x63,0x61,0x6c,0x63,0x50,0x6f,0x69,0x6e,0x74,
    0x4c,0x69,0x67,0x68,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x34,0x2c,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x35,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x36,0x2c,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x37,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x31,0x32,0x20,0x3d,
    0x20,0x76,0x65,0x63,0x34,0x28,0x6c,0x69,0x67,0x68,0x74,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x20,0x2a,0x20,0x5f,0x34,0x39,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,
    0x33,0x20,0x5f,0x31,0x33,0x32,0x20,0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,
    0x7a,0x65,0x28,0x76,0x65,0x63,0x33,0x28,0x45,0x6e,0x76,0x2e,0x78,0x2c,0x20,0x6d,
    0x61,0x78,0x28,0x28,0x28,0x45,0x6e,0x76,0x2e,0x79,0x20,0x2d,0x20,0x31,0x2e,0x30,
    0x29,0x20,0x2a,0x20,0x30,0x2e,0x36,0x34,0x39,0x39,0x39,0x39,0x39,0x37,0x36,0x31,
    0x35,0x38,0x31,0x34,0x32,0x30,0x38,0x39,0x38,0x34,0x33,0x37,0x35,0x29,0x20,0x2b,
    0x20,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x2c,0x20,0x45,0x6e,0x76,0x2e,
    0x7a,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,
    0x35,0x31,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x65,0x6e,0x76,
    0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x28,0x5f,0x31,0x33,0x32,0x2e,0x78,
    0x7a,0x20,0x2f,0x20,0x76,0x65,0x63,0x32,0x28,0x32,0x2e,0x30,0x20,0x2a,0x20,0x28,
    0x31,0x2e,0x30,0x20,0x2b,0x20,0x5f,0x31,0x33,0x32,0x2e,0x79,0x29,0x29,0x29,0x20,
    0x2b,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x35,0x29,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x31,0x35,0x34,0x20,0x3d,0x20,0x69,0x6e,0x74,
    0x28,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x79,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x35,0x34,0x20,0x3d,
    0x3d,0x20,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x46,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x6d,
    0x69,0x78,0x28,0x5f,0x31,0x31,0x32,0x2c,0x20,0x5f,0x31,0x35,0x31,0x2c,0x20,0x76,
    0x65,0x63,0x34,0x28,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,
    0x2e,0x7a,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x35,0x34,0x20,0x3d,0x3d,0x20,0x31,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x46,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x5f,0x31,0x31,0x32,0x20,0x2a,0x20,0x5f,0x31,0x35,0x31,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x5f,0x31,0x35,0x34,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x46,0x72,0x61,0x67,0x43,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x31,0x31,0x32,0x20,0x2b,0x20,0x5f,0x31,
    0x35,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,
    0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x46,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x31,0x31,
    0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before shader_universal.h"
#endif
static inline const sg_shader_desc* universal_universal_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPos";
      desc.attrs[1].name = "aNormal";
      desc.attrs[2].name = "aTexCoord";
      desc.vs.source = universal_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 208;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 13;
      desc.fs.source = universal_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 16;
      desc.fs.uniform_blocks[0].uniforms[0].name = "fs_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.uniform_blocks[1].size = 64;
      desc.fs.uniform_blocks[1].uniforms[0].name = "fs_dir_light";
      desc.fs.uniform_blocks[1].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[1].uniforms[0].array_count = 4;
      desc.fs.uniform_blocks[2].size = 2400;
      desc.fs.uniform_blocks[2].uniforms[0].name = "fs_point_lights";
      desc.fs.uniform_blocks[2].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[2].uniforms[0].array_count = 150;
      desc.fs.images[0].name = "diffuseSampler";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "envSampler";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "universal_universal_shader";
    }
    return &desc;
  }
  return 0;
}
