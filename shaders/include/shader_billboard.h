#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input billboard.glsl --output include/shader_billboard.h --slang hlsl4

    Overview:

        Shader program 'billboard':
            Get shader desc: billboard_billboard_shader_desc(sg_query_backend());
            Vertex shader: vs
                Attribute slots:
                    ATTR_billboard_vs_aPos = 0
                    ATTR_billboard_vs_aNormal = 1
                    ATTR_billboard_vs_aTexCoord = 2
                Uniform block 'vs_params':
                    C struct: billboard_vs_params_t
                    Bind slot: SLOT_billboard_vs_params = 0
            Fragment shader: fs
                Image 'texture1':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_billboard_texture1 = 0


    Shader descriptor structs:

        sg_shader billboard = sg_make_shader(billboard_billboard_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_billboard_vs_aPos] = { ... },
                    [ATTR_billboard_vs_aNormal] = { ... },
                    [ATTR_billboard_vs_aTexCoord] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_billboard_texture1 = 0;

    Bind slot and C-struct for uniform block 'vs_params':

        billboard_vs_params_t vs_params = {
            .model = ...;
            .view = ...;
            .projection = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_billboard_vs_params, &SG_RANGE(vs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_billboard_vs_aPos (0)
#define ATTR_billboard_vs_aNormal (1)
#define ATTR_billboard_vs_aTexCoord (2)
#define SLOT_billboard_texture1 (0)
#define SLOT_billboard_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct billboard_vs_params_t {
    glm::mat4 model;
    glm::mat4 view;
    glm::mat4 projection;
} billboard_vs_params_t;
#pragma pack(pop)
/*
    cbuffer vs_params : register(b0)
    {
        row_major float4x4 _15_model : packoffset(c0);
        row_major float4x4 _15_view : packoffset(c4);
        row_major float4x4 _15_projection : packoffset(c8);
    };
    
    
    static float4 gl_Position;
    static float3 aPos;
    static float3 Norm;
    static float3 aNormal;
    static float2 TexCoord;
    static float2 aTexCoord;
    
    struct SPIRV_Cross_Input
    {
        float3 aPos : TEXCOORD0;
        float3 aNormal : TEXCOORD1;
        float2 aTexCoord : TEXCOORD2;
    };
    
    struct SPIRV_Cross_Output
    {
        float3 Norm : TEXCOORD0;
        float2 TexCoord : TEXCOORD1;
        float4 gl_Position : SV_Position;
    };
    
    #line 20 "billboard.glsl"
    void vert_main()
    {
    #line 20 "billboard.glsl"
        float4x4 _72 = mul(_15_model, _15_view);
        _72[0].x = 1.0f;
        float4x4 _74 = _72;
        _74[0].y = 0.0f;
        float4x4 _76 = _74;
        _76[0].z = 0.0f;
        float4x4 _78 = _76;
        _78[2].x = 0.0f;
        float4x4 _80 = _78;
        _80[2].y = 0.0f;
        float4x4 _82 = _80;
        _82[2].z = 1.0f;
    #line 30 "billboard.glsl"
        gl_Position = mul(mul(float4(aPos, 1.0f), _82), _15_projection);
    #line 32 "billboard.glsl"
        Norm = aNormal;
    #line 33 "billboard.glsl"
        TexCoord = aTexCoord;
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        aPos = stage_input.aPos;
        aNormal = stage_input.aNormal;
        aTexCoord = stage_input.aTexCoord;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.Norm = Norm;
        stage_output.TexCoord = TexCoord;
        return stage_output;
    }
*/
static const char billboard_vs_source_hlsl4[1507] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,0x77,0x5f,0x6d,0x61,0x6a,0x6f,0x72,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x31,0x35,0x5f,0x6d,0x6f,
    0x64,0x65,0x6c,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,
    0x28,0x63,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,0x77,0x5f,0x6d,0x61,
    0x6a,0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x31,0x35,
    0x5f,0x76,0x69,0x65,0x77,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,
    0x65,0x74,0x28,0x63,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,0x77,0x5f,
    0x6d,0x61,0x6a,0x6f,0x72,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,
    0x31,0x35,0x5f,0x70,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,
    0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x38,0x29,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x61,0x50,
    0x6f,0x73,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x20,0x4e,0x6f,0x72,0x6d,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x20,0x61,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x73,
    0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x54,0x65,0x78,
    0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x61,0x50,0x6f,0x73,0x20,0x3a,0x20,0x54,0x45,
    0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x33,0x20,0x61,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3a,0x20,0x54,0x45,
    0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,
    0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x32,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,
    0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,
    0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x20,0x4e,0x6f,0x72,0x6d,0x20,0x3a,0x20,0x54,0x45,0x58,
    0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,0x54,0x45,
    0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3a,0x20,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x30,0x20,0x22,0x62,0x69,0x6c,
    0x6c,0x62,0x6f,0x61,0x72,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x30,0x20,0x22,0x62,0x69,0x6c,0x6c,0x62,0x6f,
    0x61,0x72,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x37,0x32,0x20,0x3d,0x20,0x6d,0x75,0x6c,
    0x28,0x5f,0x31,0x35,0x5f,0x6d,0x6f,0x64,0x65,0x6c,0x2c,0x20,0x5f,0x31,0x35,0x5f,
    0x76,0x69,0x65,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x37,0x32,0x5b,0x30,
    0x5d,0x2e,0x78,0x20,0x3d,0x20,0x31,0x2e,0x30,0x66,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x37,0x34,0x20,0x3d,0x20,0x5f,
    0x37,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x37,0x34,0x5b,0x30,0x5d,0x2e,0x79,
    0x20,0x3d,0x20,0x30,0x2e,0x30,0x66,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x37,0x36,0x20,0x3d,0x20,0x5f,0x37,0x34,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x5f,0x37,0x36,0x5b,0x30,0x5d,0x2e,0x7a,0x20,0x3d,0x20,
    0x30,0x2e,0x30,0x66,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x78,0x34,0x20,0x5f,0x37,0x38,0x20,0x3d,0x20,0x5f,0x37,0x36,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x5f,0x37,0x38,0x5b,0x32,0x5d,0x2e,0x78,0x20,0x3d,0x20,0x30,0x2e,0x30,
    0x66,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,
    0x5f,0x38,0x30,0x20,0x3d,0x20,0x5f,0x37,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,
    0x38,0x30,0x5b,0x32,0x5d,0x2e,0x79,0x20,0x3d,0x20,0x30,0x2e,0x30,0x66,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x38,0x32,
    0x20,0x3d,0x20,0x5f,0x38,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x5f,0x38,0x32,0x5b,
    0x32,0x5d,0x2e,0x7a,0x20,0x3d,0x20,0x31,0x2e,0x30,0x66,0x3b,0x0a,0x23,0x6c,0x69,
    0x6e,0x65,0x20,0x33,0x30,0x20,0x22,0x62,0x69,0x6c,0x6c,0x62,0x6f,0x61,0x72,0x64,
    0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,
    0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x75,0x6c,0x28,0x6d,0x75,0x6c,
    0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x61,0x50,0x6f,0x73,0x2c,0x20,0x31,0x2e,
    0x30,0x66,0x29,0x2c,0x20,0x5f,0x38,0x32,0x29,0x2c,0x20,0x5f,0x31,0x35,0x5f,0x70,
    0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,
    0x65,0x20,0x33,0x32,0x20,0x22,0x62,0x69,0x6c,0x6c,0x62,0x6f,0x61,0x72,0x64,0x2e,
    0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x4e,0x6f,0x72,0x6d,0x20,0x3d,
    0x20,0x61,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x33,0x33,0x20,0x22,0x62,0x69,0x6c,0x6c,0x62,0x6f,0x61,0x72,0x64,0x2e,0x67,0x6c,
    0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,
    0x20,0x3d,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,
    0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,
    0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x61,0x50,
    0x6f,0x73,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,
    0x2e,0x61,0x50,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x61,0x4e,0x6f,0x72,0x6d,
    0x61,0x6c,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,
    0x2e,0x61,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x61,0x54,
    0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x69,0x6e,0x70,0x75,0x74,0x2e,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,
    0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,
    0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,
    0x70,0x75,0x74,0x2e,0x4e,0x6f,0x72,0x6d,0x20,0x3d,0x20,0x4e,0x6f,0x72,0x6d,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,
    0x74,0x2e,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x54,0x65,0x78,
    0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,
    0x7d,0x0a,0x00,
};
/*
    Texture2D<float4> texture1 : register(t0);
    SamplerState _texture1_sampler : register(s0);
    
    static float2 TexCoord;
    static float4 FragColor;
    static float3 Norm;
    
    struct SPIRV_Cross_Input
    {
        float3 Norm : TEXCOORD0;
        float2 TexCoord : TEXCOORD1;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 FragColor : SV_Target0;
    };
    
    #line 14 "billboard.glsl"
    void frag_main()
    {
    #line 14 "billboard.glsl"
        float4 _21 = texture1.Sample(_texture1_sampler, TexCoord);
        if (_21.w != 1.0f)
        {
    #line 16 "billboard.glsl"
            discard;
        }
        FragColor = _21;
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        TexCoord = stage_input.TexCoord;
        Norm = stage_input.Norm;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.FragColor = FragColor;
        return stage_output;
    }
*/
static const char billboard_fs_source_hlsl4[802] = {
    0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x3e,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x31,0x20,0x3a,0x20,0x72,0x65,0x67,
    0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x30,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,
    0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x31,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,
    0x73,0x74,0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,
    0x64,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x20,0x46,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x4e,0x6f,0x72,0x6d,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x4e,0x6f,0x72,0x6d,0x20,0x3a,0x20,0x54,0x45,
    0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,0x54,
    0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x46,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,
    0x20,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x34,0x20,0x22,0x62,0x69,0x6c,0x6c,0x62,
    0x6f,0x61,0x72,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x23,0x6c,
    0x69,0x6e,0x65,0x20,0x31,0x34,0x20,0x22,0x62,0x69,0x6c,0x6c,0x62,0x6f,0x61,0x72,
    0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x5f,0x32,0x31,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x31,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x31,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,0x78,0x43,
    0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,
    0x32,0x31,0x2e,0x77,0x20,0x21,0x3d,0x20,0x31,0x2e,0x30,0x66,0x29,0x0a,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x36,0x20,0x22,0x62,0x69,
    0x6c,0x6c,0x62,0x6f,0x61,0x72,0x64,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x46,0x72,0x61,0x67,0x43,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x5f,0x32,0x31,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,
    0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,
    0x72,0x64,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,
    0x2e,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x4e,
    0x6f,0x72,0x6d,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,
    0x74,0x2e,0x4e,0x6f,0x72,0x6d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x46,
    0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x46,0x72,0x61,0x67,0x43,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,
    0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before shader_billboard.h"
#endif
static inline const sg_shader_desc* billboard_billboard_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_D3D11) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].sem_name = "TEXCOORD";
      desc.attrs[0].sem_index = 0;
      desc.attrs[1].sem_name = "TEXCOORD";
      desc.attrs[1].sem_index = 1;
      desc.attrs[2].sem_name = "TEXCOORD";
      desc.attrs[2].sem_index = 2;
      desc.vs.source = billboard_vs_source_hlsl4;
      desc.vs.d3d11_target = "vs_4_0";
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 192;
      desc.fs.source = billboard_fs_source_hlsl4;
      desc.fs.d3d11_target = "ps_4_0";
      desc.fs.entry = "main";
      desc.fs.images[0].name = "texture1";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "billboard_billboard_shader";
    }
    return &desc;
  }
  return 0;
}
