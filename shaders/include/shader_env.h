#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input env.glsl --output include/shader_env.h --slang glsl330

    Overview:

        Shader program 'env':
            Get shader desc: env_env_shader_desc(sg_query_backend());
            Vertex shader: vs
                Attribute slots:
                    ATTR_env_vs_aPos = 0
                    ATTR_env_vs_aNormal = 1
                    ATTR_env_vs_aTexCoord = 2
                Uniform block 'vs_params':
                    C struct: env_vs_params_t
                    Bind slot: SLOT_env_vs_params = 0
            Fragment shader: fs
                Uniform block 'fs_params':
                    C struct: env_fs_params_t
                    Bind slot: SLOT_env_fs_params = 0
                Image 'diffuseSampler':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_env_diffuseSampler = 0
                Image 'envSampler':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_env_envSampler = 1


    Shader descriptor structs:

        sg_shader env = sg_make_shader(env_env_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_env_vs_aPos] = { ... },
                    [ATTR_env_vs_aNormal] = { ... },
                    [ATTR_env_vs_aTexCoord] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_env_diffuseSampler = 0;
        SLOT_env_envSampler = 1;

    Bind slot and C-struct for uniform block 'vs_params':

        env_vs_params_t vs_params = {
            .model = ...;
            .view = ...;
            .projection = ...;
            .viewPos = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_env_vs_params, &SG_RANGE(vs_params));

    Bind slot and C-struct for uniform block 'fs_params':

        env_fs_params_t fs_params = {
            .envMode = ...;
            .envRatio = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_env_fs_params, &SG_RANGE(fs_params));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_env_vs_aPos (0)
#define ATTR_env_vs_aNormal (1)
#define ATTR_env_vs_aTexCoord (2)
#define SLOT_env_diffuseSampler (0)
#define SLOT_env_envSampler (1)
#define SLOT_env_vs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct env_vs_params_t {
    glm::mat4 model;
    glm::mat4 view;
    glm::mat4 projection;
    glm::vec3 viewPos;
    uint8_t _pad_204[4];
} env_vs_params_t;
#pragma pack(pop)
#define SLOT_env_fs_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct env_fs_params_t {
    float envMode;
    float envRatio;
    uint8_t _pad_8[8];
} env_fs_params_t;
#pragma pack(pop)
/*
    #version 330
    
    uniform vec4 vs_params[13];
    out vec3 FragPos;
    layout(location = 0) in vec3 aPos;
    out vec3 ViewDir;
    out vec3 Env;
    layout(location = 1) in vec3 aNormal;
    out vec3 Norm;
    out vec2 TexCoord;
    layout(location = 2) in vec2 aTexCoord;
    
    void main()
    {
        mat4 _21 = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]);
        vec4 _29 = vec4(aPos, 1.0);
        FragPos = vec3((_21 * _29).xyz);
        ViewDir = normalize(FragPos - vs_params[12].xyz);
        Env = reflect(ViewDir, normalize(aNormal)) * vec3(1.0, 1.0, -1.0);
        Norm = aNormal;
        TexCoord = aTexCoord;
        gl_Position = ((mat4(vs_params[8], vs_params[9], vs_params[10], vs_params[11]) * mat4(vs_params[4], vs_params[5], vs_params[6], vs_params[7])) * _21) * _29;
    }
    
*/
static const char env_vs_source_glsl330[736] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x31,0x33,0x5d,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,
    0x63,0x33,0x20,0x46,0x72,0x61,0x67,0x50,0x6f,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
    0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x50,0x6f,0x73,0x3b,0x0a,0x6f,
    0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x56,0x69,0x65,0x77,0x44,0x69,0x72,0x3b,
    0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x45,0x6e,0x76,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x61,0x4e,0x6f,0x72,
    0x6d,0x61,0x6c,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x4e,0x6f,
    0x72,0x6d,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x54,0x65,0x78,
    0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x32,0x20,0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x32,0x31,0x20,0x3d,0x20,0x6d,0x61,0x74,
    0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,0x20,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x34,0x20,0x5f,0x32,0x39,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x61,
    0x50,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x46,
    0x72,0x61,0x67,0x50,0x6f,0x73,0x20,0x3d,0x20,0x76,0x65,0x63,0x33,0x28,0x28,0x5f,
    0x32,0x31,0x20,0x2a,0x20,0x5f,0x32,0x39,0x29,0x2e,0x78,0x79,0x7a,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x56,0x69,0x65,0x77,0x44,0x69,0x72,0x20,0x3d,0x20,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x46,0x72,0x61,0x67,0x50,0x6f,0x73,0x20,
    0x2d,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x32,0x5d,0x2e,
    0x78,0x79,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x45,0x6e,0x76,0x20,0x3d,0x20,
    0x72,0x65,0x66,0x6c,0x65,0x63,0x74,0x28,0x56,0x69,0x65,0x77,0x44,0x69,0x72,0x2c,
    0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x61,0x4e,0x6f,0x72,0x6d,
    0x61,0x6c,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x28,0x31,0x2e,0x30,0x2c,
    0x20,0x31,0x2e,0x30,0x2c,0x20,0x2d,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x4e,0x6f,0x72,0x6d,0x20,0x3d,0x20,0x61,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,
    0x61,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,0x28,0x6d,
    0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x38,0x5d,
    0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x39,0x5d,0x2c,0x20,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x30,0x5d,0x2c,0x20,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x31,0x5d,0x29,0x20,0x2a,0x20,
    0x6d,0x61,0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,
    0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x2c,
    0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x36,0x5d,0x2c,0x20,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x29,0x20,0x2a,0x20,
    0x5f,0x32,0x31,0x29,0x20,0x2a,0x20,0x5f,0x32,0x39,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,

};
/*
    #version 330
    
    uniform vec4 fs_params[1];
    uniform sampler2D diffuseSampler;
    uniform sampler2D envSampler;
    
    in vec2 TexCoord;
    in vec3 Env;
    layout(location = 0) out vec4 FragColor;
    in vec3 FragPos;
    in vec3 Norm;
    in vec3 ViewDir;
    
    void main()
    {
        vec4 _21 = texture(diffuseSampler, TexCoord);
        vec3 _46 = normalize(vec3(Env.x, max(((Env.y - 1.0) * 0.64999997615814208984375) + 1.0, 0.0), Env.z));
        vec4 _66 = texture(envSampler, (_46.xz / vec2(2.0 * (1.0 + _46.y))) + vec2(0.5));
        int _75 = int(fs_params[0].x);
        if (_75 == 0)
        {
            FragColor = mix(_21, _66, vec4(fs_params[0].y));
        }
        else
        {
            if (_75 == 1)
            {
                FragColor = _21 * _66;
            }
            else
            {
                if (_75 == 2)
                {
                    FragColor = _21 + _66;
                }
            }
        }
    }
    
*/
static const char env_fs_source_glsl330[834] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x73,0x5f,0x70,0x61,
    0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x64,0x69,0x66,0x66,0x75,
    0x73,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x65,0x6e,0x76,
    0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x32,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x33,0x20,0x45,0x6e,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,
    0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x46,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x46,0x72,0x61,0x67,0x50,0x6f,
    0x73,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x4e,0x6f,0x72,0x6d,0x3b,
    0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x56,0x69,0x65,0x77,0x44,0x69,0x72,
    0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x32,0x31,0x20,0x3d,0x20,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x53,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x33,0x20,0x5f,0x34,0x36,0x20,
    0x3d,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x69,0x7a,0x65,0x28,0x76,0x65,0x63,0x33,
    0x28,0x45,0x6e,0x76,0x2e,0x78,0x2c,0x20,0x6d,0x61,0x78,0x28,0x28,0x28,0x45,0x6e,
    0x76,0x2e,0x79,0x20,0x2d,0x20,0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,0x30,0x2e,0x36,
    0x34,0x39,0x39,0x39,0x39,0x39,0x37,0x36,0x31,0x35,0x38,0x31,0x34,0x32,0x30,0x38,
    0x39,0x38,0x34,0x33,0x37,0x35,0x29,0x20,0x2b,0x20,0x31,0x2e,0x30,0x2c,0x20,0x30,
    0x2e,0x30,0x29,0x2c,0x20,0x45,0x6e,0x76,0x2e,0x7a,0x29,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x36,0x36,0x20,0x3d,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x28,0x65,0x6e,0x76,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,
    0x20,0x28,0x5f,0x34,0x36,0x2e,0x78,0x7a,0x20,0x2f,0x20,0x76,0x65,0x63,0x32,0x28,
    0x32,0x2e,0x30,0x20,0x2a,0x20,0x28,0x31,0x2e,0x30,0x20,0x2b,0x20,0x5f,0x34,0x36,
    0x2e,0x79,0x29,0x29,0x29,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x35,
    0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x37,0x35,0x20,
    0x3d,0x20,0x69,0x6e,0x74,0x28,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x30,0x5d,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,
    0x37,0x35,0x20,0x3d,0x3d,0x20,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x46,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x5f,0x32,0x31,0x2c,0x20,0x5f,0x36,0x36,0x2c,
    0x20,0x76,0x65,0x63,0x34,0x28,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,
    0x30,0x5d,0x2e,0x79,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x37,0x35,0x20,0x3d,0x3d,0x20,
    0x31,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x46,0x72,0x61,0x67,0x43,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x5f,0x32,0x31,0x20,0x2a,0x20,0x5f,0x36,0x36,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x37,0x35,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x46,0x72,0x61,0x67,0x43,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x5f,0x32,0x31,0x20,0x2b,0x20,0x5f,0x36,0x36,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,
    0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before shader_env.h"
#endif
static inline const sg_shader_desc* env_env_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "aPos";
      desc.attrs[1].name = "aNormal";
      desc.attrs[2].name = "aTexCoord";
      desc.vs.source = env_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 208;
      desc.vs.uniform_blocks[0].uniforms[0].name = "vs_params";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 13;
      desc.fs.source = env_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 16;
      desc.fs.uniform_blocks[0].uniforms[0].name = "fs_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.images[0].name = "diffuseSampler";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "envSampler";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "env_env_shader";
    }
    return &desc;
  }
  return 0;
}
